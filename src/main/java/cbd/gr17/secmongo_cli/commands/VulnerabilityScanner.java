package cbd.gr17.secmongo_cli.commands;

import java.util.ArrayList;
import java.util.Arrays;

import org.bson.Document;

import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

public class VulnerabilityScanner {

    private static Integer succesChecks = 0;
    private static Integer totalChecks = 0;
    

    private static Document getServerConfig(MongoDatabase database) {
        Document command = new Document("getCmdLineOpts", 1);
        Document result = database.runCommand(command);
        return result;
    }

    public static void checkAuthentication(MongoDatabase database) {
        try {
            Document status = getServerConfig(database);
            if (status.toJson().contains("auth") && status.toJson().contains("enabled")) {
                System.out.println("[✔] Authentication is enabled.");
                succesChecks++;
            } else {
                System.out.println("[⚠] Authentication is not enabled.");
            }
        } catch (Exception e) {
            System.out.println("[✔] Authentication is enabled.");
            succesChecks++;
        }

        totalChecks++;
    }

    public static void testNoSQLInjection(MongoDatabase database, String collectionName) {
        try {
            MongoCollection<Document> collection = database.getCollection(collectionName);
            Document maliciousQuery = new Document("$or",
                    Arrays.asList(
                            new Document("user", "admin"),
                            new Document("password", new Document("$ne", ""))));

            Document result = collection.find(maliciousQuery).first();
            if (result != null) {
                System.out.println("[⚠] NoSQL Injection vulnerability detected in the collection: " + collectionName);
            } else {
                System.out.println("[✔] The collection " + collectionName + " is not vulnerable to NoSQL Injection.");
                succesChecks++;
            }
        } catch (Exception e) {
            System.out.println("[✔] The collection " + collectionName + " is not vulnerable to NoSQL Injection.");
            succesChecks++;
        }
        totalChecks++;
    }

    public static void testJavaScriptExecution(MongoDatabase database, String collectionName) {
        try {
            MongoCollection<Document> collection = database.getCollection(collectionName);
            Document jsQuery = new Document("$where", "function() { return true; }");

            Document result = collection.find(jsQuery).first();
            if (result != null) {
                System.out.println("[⚠] MongoDB allows JavaScript execution.");
            } else {
                System.out.println("[✔] JavaScript execution is blocked.");
                succesChecks++;
            }
        } catch (Exception e) {
            System.out.println("[✔] Could not execute JavaScript.");
            succesChecks++;
        }
        totalChecks++;
    }

    public static void checkTLS(MongoDatabase database) {
        try {
            Document status = getServerConfig(database);
            if (!status.toJson().contains("sslMode") || status.toJson().contains("disabled")) {
                System.out.println("[⚠] SSL/TLS is disabled.");
            } else {
                System.out.println("[✔] SSL/TLS is enabled.");
                succesChecks++;
            }
        } catch (Exception e) {
            System.out.println("[⚠] Could not verify SSL/TLS.");
        }
        totalChecks++;
    }

    public static void checkIPBinding(MongoDatabase database) {
        try {
            Document status = getServerConfig(database);
            if (status.toJson().contains("bindIp") && !status.toJson().contains("0.0.0.0")) {
                System.out.println("[✔] MongoDB is bound to specific IP addresses.");
                succesChecks++;
            } else {
                System.out.println("[⚠] MongoDB is bound to all IP addresses (0.0.0.0). This is insecure.");
            }
        } catch (Exception e) {
            System.out.println("[⚠] Could not verify IP binding.");
        }
        totalChecks++;
    }

    public static void scanAllCollections(MongoDatabase database) {
        for (String collectionName : database.listCollectionNames()) {
            System.out.println("Scanning collection: " + collectionName);
            testNoSQLInjection(database, collectionName);
            testJavaScriptExecution(database, collectionName);
        }
    }

    public static void checkUsersWithNoRoles(MongoDatabase database) {
        try {
            Document command = new Document("usersInfo", 1);
            Document result = database.runCommand(command);
            var users = result.getList("users", Document.class);
            if (users.isEmpty()) {
                System.out.println("[⚠] No users found in the database.");
                totalChecks++;
                return;
            }
            for (Document user : users) {
                if (!user.containsKey("roles") || user.getList("roles", Document.class).isEmpty()) {
                    System.out.println("[⚠] User '" + user.getString("user") + "' has no roles assigned.");
                } else {
                    System.out.println("[✔] User '" + user.getString("user") + "' has roles assigned.");
                    succesChecks++;
                }
                totalChecks++;
            }
        } catch (Exception e) {
            System.out.println("[⚠] Could not verify user roles.");
        }
    }

    public static void checkCriticalConfig(MongoDatabase database) {
        try {
            Document status = getServerConfig(database);
            String config = status.toJson();

            if (config.contains("--nojournal") || !config.contains("journal")) {
                System.out.println("[⚠] Journaling is disabled. This can cause data loss.");
            }else {
                System.out.println("[✔] Journaling is enabled.");
                succesChecks++;
            }
            if (!config.contains("dbPath")) {
                System.out.println("[⚠] Database path (dbpath) is not configured. This is unsafe.");
            }else {
                System.out.println("[✔] Database path (dbpath) is configured.");
                succesChecks++;
            }
        } catch (Exception e) {
            System.out.println("[⚠] Could not verify critical configurations.");
        }
        totalChecks++;
    }

    //TODO: Add a general configuration check command and add this 
    public static void checkIndexes(MongoDatabase database) {
        try {
            for (String collectionName : database.listCollectionNames()) {
                MongoCollection<Document> collection = database.getCollection(collectionName);
                long indexCount = collection.listIndexes().into(new ArrayList<>()).size();

                if (indexCount == 0) {
                    System.out.println("[⚠] Collection '" + collectionName + "' has no indexes.");
                } else {
                    System.out.println("[✔] Collection '" + collectionName + "' has " + indexCount + " index(es).");
                    succesChecks++;
                }
                totalChecks++;
            }
        } catch (Exception e) {
            System.out.println("[⚠] Could not verify indexes.");
        }
    }


    //TODO: Add a general configuration check command and add this 
    public static void checkTTLIndexes(MongoDatabase database) {
        try {
            for (String collectionName : database.listCollectionNames()) {
                MongoCollection<Document> collection = database.getCollection(collectionName);
                var indexes = collection.listIndexes();
                boolean ttlExists = false;

                for (Document index : indexes) {
                    if (index.containsKey("expireAfterSeconds")) {
                        ttlExists = true;
                        break;
                    }
                }

                if (!ttlExists) {
                    System.out.println("[⚠] Collection '" + collectionName + "' does not have TTL indexes.");
                } else {
                    System.out.println("[✔] Collection '" + collectionName + "' has TTL indexes.");
                    succesChecks++;
                }
                totalChecks++;
            }
        } catch (Exception e) {
            System.out.println("[⚠] Could not verify TTL indexes.");
        }
    }

    public static void checkCappedCollections(MongoDatabase database) {
        try {
            for (String collectionName : database.listCollectionNames()) {
                Document stats = database.runCommand(new Document("collStats", collectionName));
                if (stats.containsKey("capped") && stats.getBoolean("capped")) {
                    System.out.println("[✔] Collection '" + collectionName + "' is capped.");
                    succesChecks++;
                } else {
                    System.out.println("[⚠] Collection '" + collectionName + "' is not capped.");
                }
                totalChecks++;
            }
        } catch (Exception e) {
            System.out.println("[⚠] Could not verify capped collections.");
        }
    }

    //TODO: Add more checks for security: Auditory, cipher and updates

    public static void runSecurityChecks(MongoDatabase database) {
        
        System.out.println("===================================================");
        System.out.println("Running security checks on " + database.getName() + " database...");
        System.out.println("===================================================");



        
        if(database.getName().equals("admin")) {

            System.out.println("\nCONFIGURATION CHECKS");
            System.out.println("Note: The following checks are only performed on the 'admin' database.");
            System.out.println("--------------------------------------------------");
            System.out.println("Checking network security...");
            System.out.println("--------------------------------------------------");
            checkTLS(database);
            checkIPBinding(database);

            System.out.println("\nChecking auth configuration...");
            System.out.println("--------------------------------------------------");
            checkAuthentication(database);

            System.out.println("\nChecking critical configurations...");
            System.out.println("--------------------------------------------------");
            checkCriticalConfig(database);
        }

        System.out.println("\nDATABASE USERS CHECKS");
        System.out.println("--------------------------------------------------");
        System.out.println("Checking user roles...");
        System.out.println("--------------------------------------------------");
        checkUsersWithNoRoles(database);


        System.out.println("\nCOLLECTIONS CHECKS");
        System.out.println("--------------------------------------------------");

        System.out.println("Checking database collections...");
        System.out.println("--------------------------------------------------");
        scanAllCollections(database);
        checkCappedCollections(database);
    }

    public static void resetCounters() {
        succesChecks = 0;
        totalChecks = 0;
    }
    
    public static int getSuccessChecks() {
        return succesChecks;
    }
    
    public static int getTotalChecks() {
        return totalChecks;
    }    

}