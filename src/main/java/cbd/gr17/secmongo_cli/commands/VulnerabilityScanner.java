package cbd.gr17.secmongo_cli.commands;

import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;

import java.util.ArrayList;
import java.util.Arrays;

public class VulnerabilityScanner {

    private static Integer succesChecks = 0;
    private static Integer totalChecks = 0;

    public static void checkAuthentication(MongoDatabase database) {
        try {
            Document status = database.runCommand(new Document("getCmdLineOpts", 1));
            if (status.toJson().contains("auth") && status.toJson().contains("enabled")) {
                System.out.println("[✔] Authentication is enabled.");
                succesChecks++;
            } else {
                System.out.println("[⚠] Authentication is not enabled.");
            }
        } catch (Exception e) {
            System.out.println("[✔] Authentication is enabled.");
        }

        totalChecks++;
    }

    public static void testNoSQLInjection(MongoDatabase database, String collectionName) {
        try {
            MongoCollection<Document> collection = database.getCollection(collectionName);
            Document maliciousQuery = new Document("$or",
                    Arrays.asList(
                            new Document("user", "admin"),
                            new Document("password", new Document("$ne", ""))
                    ));

            Document result = collection.find(maliciousQuery).first();
            if (result != null) {
                System.out.println("[⚠] NoSQL Injection vulnerability detected in the collection: " + collectionName);
            } else {
                System.out.println("[✔] The collection " + collectionName + " is not vulnerable to NoSQL Injection.");
                succesChecks++;
            } 
        } catch (Exception e) {
            System.out.println("[✔] Could not test NoSQL Injection in " + collectionName);
        }
        totalChecks++;
    }

    public static void testJavaScriptExecution(MongoDatabase database, String collectionName) {
        try {
            MongoCollection<Document> collection = database.getCollection(collectionName);
            Document jsQuery = new Document("$where", "function() { return true; }");

            Document result = collection.find(jsQuery).first();
            if (result != null) {
                System.out.println("[⚠] MongoDB allows JavaScript execution.");
            } else {
                System.out.println("[✔] JavaScript execution is blocked.");
                succesChecks++;
            }
        } catch (Exception e) {
            System.out.println("[✔] Could not execute JavaScript.");
        }
        totalChecks++;
    }

    public static void checkTLS(MongoDatabase database) {
        try {
            Document status = database.runCommand(new Document("getCmdLineOpts", 1));
            if (!status.toJson().contains("sslMode") || status.toJson().contains("disabled")) {
                System.out.println("[⚠] SSL/TLS is disabled.");
            } else {
                System.out.println("[✔] SSL/TLS is enabled.");
                succesChecks++;
            }
        } catch (Exception e) {
            System.out.println("[✔] Could not verify SSL/TLS.");
        }
        totalChecks++;
    }

    public static void checkIPBinding(MongoDatabase database) {
        try {
            Document status = database.runCommand(new Document("getCmdLineOpts", 1));
            if (status.toJson().contains("bindIp") && !status.toJson().contains("0.0.0.0")) {
                System.out.println("[✔] MongoDB is bound to specific IP addresses.");
                succesChecks++;
            } else {
                System.out.println("[⚠] MongoDB is bound to all IP addresses (0.0.0.0). This is insecure.");
            }
        } catch (Exception e) {
            System.out.println("[✔] Could not verify IP binding.");
        }
        totalChecks++;
    }

    public static void checkCollectionSizes(MongoDatabase database) {
        try {
            for (String collectionName : database.listCollectionNames()) {
                MongoCollection<Document> collection = database.getCollection(collectionName);
                long count = collection.countDocuments();
                System.out.println("[✔] Collection: " + collectionName + " has " + count + " documents.");
                succesChecks++;
                if (count > 1000000) { 
                    System.out.println("[⚠] Collection " + collectionName + " has an unusually large number of documents.");
                }
            }
        } catch (Exception e) {
            System.out.println("[✔] Could not verify collection sizes.");
        }
        totalChecks++;
    }

    public static void scanAllCollections(MongoDatabase database) {
        for (String collectionName : database.listCollectionNames()) {
            System.out.println("Scanning collection: " + collectionName);
            testNoSQLInjection(database, collectionName);
            testJavaScriptExecution(database, collectionName);
        }
    }

    public static void checkUsersWithNoRoles(MongoDatabase database) {
        try {
            Document command = new Document("usersInfo", 1);
            Document result = database.runCommand(command);
            var users = result.getList("users", Document.class);
    
            for (Document user : users) {
                if (!user.containsKey("roles") || user.getList("roles", Document.class).isEmpty()) {
                    System.out.println("[⚠] User '" + user.getString("user") + "' has no roles assigned.");
                }else{
                    succesChecks++;
                }
                totalChecks++;
            }
            System.out.println("[✔] All users have roles assigned.");
        } catch (Exception e) {
            System.out.println("[✔] Could not verify user roles.");
        }
    }

    public static void checkCriticalConfig(MongoDatabase database) {
        try {
            Document status = database.runCommand(new Document("getCmdLineOpts", 1));
            String config = status.toJson();
    
            if (config.contains("--nojournal") || !config.contains("journal")) {
                System.out.println("[⚠] Journaling is disabled. This can cause data loss.");
            }
            if (!config.contains("dbPath")) {
                System.out.println("[⚠] Database path (dbpath) is not configured. This is unsafe.");
            }
        } catch (Exception e) {
            System.out.println("[✔] Could not verify critical configurations.");
            succesChecks++;
        }
        totalChecks++;
    }

    public static void checkIndexes(MongoDatabase database) {
        try {
            for (String collectionName : database.listCollectionNames()) {
                MongoCollection<Document> collection = database.getCollection(collectionName);
                long indexCount = collection.listIndexes().into(new ArrayList<>()).size();
                
                if (indexCount == 0) {
                    System.out.println("[⚠] Collection '" + collectionName + "' has no indexes.");
                } else {
                    System.out.println("[✔] Collection '" + collectionName + "' has " + indexCount + " index(es).");
                    succesChecks++;
                }
                totalChecks++;
            }
        } 
        catch (Exception e) {
            System.out.println("[✔] Could not verify indexes.");
        }
    }


    public static void checkTTLIndexes(MongoDatabase database) {
        try {
            for (String collectionName : database.listCollectionNames()) {
                MongoCollection<Document> collection = database.getCollection(collectionName);
                var indexes = collection.listIndexes();
                boolean ttlExists = false;
    
                for (Document index : indexes) {
                    if (index.containsKey("expireAfterSeconds")) {
                        ttlExists = true;
                        break;
                    }
                }
    
                if (!ttlExists) {
                    System.out.println("[⚠] Collection '" + collectionName + "' does not have TTL indexes.");
                } else {
                    System.out.println("[✔] Collection '" + collectionName + "' has TTL indexes.");
                    succesChecks++;
                }
                totalChecks++;
            }
        } catch (Exception e) {
            System.out.println("[✔] Could not verify TTL indexes.");
        }
    }

    public static void checkCappedCollections(MongoDatabase database) {
        try {
            for (String collectionName : database.listCollectionNames()) {
                Document stats = database.runCommand(new Document("collStats", collectionName));
                if (stats.containsKey("capped") && stats.getBoolean("capped")) {
                    System.out.println("[✔] Collection '" + collectionName + "' is capped.");
                    succesChecks++;
                } else {
                    System.out.println("[⚠] Collection '" + collectionName + "' is not capped.");
                }
                totalChecks++;
            }
        } catch (Exception e) {
            System.out.println("[✔] Could not verify capped collections.");
        }
    }

    public static void checkWireObjectCheck(MongoDatabase database) {
        try {
            Document status = database.runCommand(new Document("getCmdLineOpts", 1));
            String json = status.toJson();
            if (json.contains("wireObjectCheck") && json.contains("false")) {
                System.out.println("[⚠] La validación de objetos BSON está deshabilitada.");
            } else {
                System.out.println("[✔] La validación de objetos BSON está habilitada.");
                succesChecks++;
            }
        } catch (Exception e) {
            System.out.println("[⚠] No se pudo verificar la configuración de wireObjectCheck.");
        }
        totalChecks++;
    }

    public static void checkAuditLog(MongoDatabase database) {
        try {
            Document status = database.runCommand(new Document("getCmdLineOpts", 1));
            String json = status.toJson();
            if (json.contains("auditLog")) {
                System.out.println("[✔] La auditoría está habilitada.");
                succesChecks++;
            } else {
                System.out.println("[⚠] La auditoría no está habilitada.");
            }
        } catch (Exception e) {
            System.out.println("[⚠] No se pudo verificar la configuración de auditoría.");
        }
        totalChecks++;
    }
    
    

    public static void runSecurityChecks(MongoDatabase database) {        

        System.out.println("Checking network security...");
        System.out.println("--------------------------------------------------");
        checkTLS(database);
        checkIPBinding(database);

        System.out.println("\nChecking auth configuration...");
        System.out.println("--------------------------------------------------");
        checkAuthentication(database);
        checkUsersWithNoRoles(database);

        System.out.println("\nChecking noSQL injection and JavaScript execution...");
        System.out.println("--------------------------------------------------");
        scanAllCollections(database);

        System.out.println("\nChecking input validation...");
        System.out.println("--------------------------------------------------");
        checkWireObjectCheck(database);
        

        System.out.println("\nChecking collection sizes...");
        System.out.println("--------------------------------------------------");
        checkCollectionSizes(database);

        System.out.println("\nChecking indexes...");
        System.out.println("--------------------------------------------------");
        checkIndexes(database);
        checkTTLIndexes(database);
        checkCappedCollections(database);

        System.out.println("\nChecking critical configurations...");
        System.out.println("--------------------------------------------------");
        checkCriticalConfig(database);
        checkAuditLog(database);
        checkCappedCollections(database);

        System.out.println("\nSecurity scan completed.");
        System.out.println("--------------------------------------------------");
        System.out.println("Total checks performed: " + totalChecks);
        System.out.println("Security mark: " + succesChecks + "/" + totalChecks);

        System.out.println("Final mark: "+ (succesChecks *100) / totalChecks + "%");
    }
    
}