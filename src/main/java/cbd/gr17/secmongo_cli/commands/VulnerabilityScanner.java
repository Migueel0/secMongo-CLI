package cbd.gr17.secmongo_cli.commands;

import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;
import java.util.Arrays;

public class VulnerabilityScanner {

    public static void checkAuthentication(MongoDatabase database) {
        try {
            Document status = database.runCommand(new Document("getCmdLineOpts", 1));
            if (status.toJson().contains("auth") && status.toJson().contains("enabled")) {
                System.out.println("[✔] Authentication is enabled.");
            } else {
                System.out.println("[⚠] Authentication is not enabled.");
            }
        } catch (Exception e) {
            System.out.println("[✔] Authentication is enabled.");
        }
    }

    public static void testNoSQLInjection(MongoDatabase database, String collectionName) {
        try {
            MongoCollection<Document> collection = database.getCollection(collectionName);
            Document maliciousQuery = new Document("$or",
                    Arrays.asList(
                            new Document("user", "admin"),
                            new Document("password", new Document("$ne", ""))
                    ));

            Document result = collection.find(maliciousQuery).first();
            if (result != null) {
                System.out.println("[⚠] NoSQL Injection vulnerability detected in the collection: " + collectionName);
            } else {
                System.out.println("[✔] The collection " + collectionName + " is not vulnerable to NoSQL Injection.");
            } 
        } catch (Exception e) {
            System.out.println("[✔] Could not test NoSQL Injection in " + collectionName);
        }
    }

    public static void testJavaScriptExecution(MongoDatabase database, String collectionName) {
        try {
            MongoCollection<Document> collection = database.getCollection(collectionName);
            Document jsQuery = new Document("$where", "function() { return true; }");

            Document result = collection.find(jsQuery).first();
            if (result != null) {
                System.out.println("[⚠] MongoDB allows JavaScript execution.");
            } else {
                System.out.println("[✔] JavaScript execution is blocked.");
            }
        } catch (Exception e) {
            System.out.println("[✔] Could not execute JavaScript.");
        }
    }

    public static void checkTLS(MongoDatabase database) {
        try {
            Document status = database.runCommand(new Document("getCmdLineOpts", 1));
            if (!status.toJson().contains("sslMode") || status.toJson().contains("disabled")) {
                System.out.println("[⚠] SSL/TLS is disabled.");
            } else {
                System.out.println("[✔] SSL/TLS is enabled.");
            }
        } catch (Exception e) {
            System.out.println("[✔] Could not verify SSL/TLS.");
        }
    }

    public static void scanAllCollections(MongoDatabase database) {
        for (String collectionName : database.listCollectionNames()) {
            System.out.println("Scanning collection: " + collectionName);
            testNoSQLInjection(database, collectionName);
            testJavaScriptExecution(database, collectionName);
        }
    }

    public static void runSecurityChecks(MongoDatabase database) {
        checkAuthentication(database);
        checkTLS(database);
        scanAllCollections(database);
    }
}