package cbd.gr17.secmongo_cli.commands;

import java.util.ArrayList;
import java.util.Arrays;

import org.bson.Document;

import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

public class VulnerabilityScanner {

    private static Integer succesChecks = 0;
    private static Integer totalChecks = 0;
    

    private static Document getServerConfig(MongoDatabase database) {
        Document command = new Document("getCmdLineOpts", 1);
        Document result = database.runCommand(command);
        return result;
    }

    public static void checkAuthentication(MongoDatabase database) {
        try {
            Document status = getServerConfig(database);
            Document securityConfig = (Document) status.get("parsed", Document.class).get("security");
            if (securityConfig != null && securityConfig.containsKey("authorization") && 
                "enabled".equals(securityConfig.getString("authorization"))) {
                System.out.println("[✔] Authentication is enabled.");
                succesChecks++;
            } else {
                System.out.println("[⚠] Authentication is not enabled.");
            }
        } catch (Exception e) {
            System.out.println("[✔] Authentication is enabled.");
            succesChecks++;
        }

        totalChecks++;
    }

    public static void checkCollectionValidator(MongoDatabase database, String collectionName) {
        try {
            Document filter = new Document("name", collectionName);
            ArrayList<Document> collectionInfos = database.listCollections().filter(filter).into(new ArrayList<>());

            if (!collectionInfos.isEmpty()) {
                Document collectionInfo = collectionInfos.get(0);
                if (collectionInfo.containsKey("options")) {
                    Document options = collectionInfo.get("options", Document.class);
                    if (options.containsKey("validator")) {
                        System.out.println("[✔] Collection '" + collectionName + "' has a validator configured.");
                        succesChecks++;
                    } else {
                        System.out.println("[⚠] Collection '" + collectionName + "' does not have a validator configured.");
                    }
                } else {
                    System.out.println("[⚠] Collection '" + collectionName + "' does not have any options configured.");
                }
            } else {
                System.out.println("[⚠] Collection '" + collectionName + "' does not exist.");
            }
        } catch (Exception e) {
            System.out.println("[⚠] Could not verify validator for collection '" + collectionName + "'.");
        }
        totalChecks++;
    }

    
    public static void testNoSQLInjection(MongoDatabase database, String collectionName) {
        try {
            MongoCollection<Document> collection = database.getCollection(collectionName);
            if(collection.find().first() == null){
                System.out.println("[⚠] The collection " + collectionName + " is empty. Skipping NoSQL Injection test.");
                totalChecks++;
                return;
            }

            Document maliciousQuery = new Document("$or",
                    Arrays.asList(
                            new Document("user", "admin"),
                            new Document("password", new Document("$ne", ""))));

            Document result = collection.find(maliciousQuery).first();
            if (result != null) {
                System.out.println("[⚠] NoSQL Injection vulnerability detected in the collection: " + collectionName);
            } else {
                System.out.println("[✔] The collection " + collectionName + " is not vulnerable to NoSQL Injection.");
                succesChecks++;
            }
        } catch (Exception e) {
            System.out.println("[✔] The collection " + collectionName + " is not vulnerable to NoSQL Injection.");
            succesChecks++;
        }
        totalChecks++;
    }

    public static void testJavaScriptExecution(MongoDatabase database, String collectionName) {
        try {
            MongoCollection<Document> collection = database.getCollection(collectionName);

            if(collection.find().first() == null){
                System.out.println("[⚠] The collection " + collectionName + " is empty. Skipping JavaScript execution test.");
                totalChecks++;
                return;
            }

            Document jsQuery = new Document("$where", "function() { return true; }");

            Document result = collection.find(jsQuery).first();
            
            if (result != null) {
                System.out.println("[⚠] MongoDB allows JavaScript execution.");
            } else {
                System.out.println("[✔] JavaScript execution is blocked.");
                succesChecks++;
            }
        } catch (Exception e) {
            System.out.println("[✔] Could not execute JavaScript.");
            succesChecks++;
        }
        totalChecks++;
    }

    public static void checkTLS(MongoDatabase database) {
        try {
            Document status = getServerConfig(database);
            Document netConfig = (Document) status.get("parsed", Document.class).get("net");
            if (netConfig != null && netConfig.containsKey("tls")) {
                System.out.println("[✔] SSL/TLS is configured.");
                succesChecks++;
            } else {
                System.out.println("[⚠] SSL/TLS is not enabled.");
            }
        } catch (Exception e) {
            System.out.println("[⚠] Could not verify SSL/TLS.");
        }
        totalChecks++;
    }

    public static void checkIPBinding(MongoDatabase database) {
        try {
            Document status = getServerConfig(database);
            if (status.toJson().contains("bindIp") && !status.toJson().contains("0.0.0.0")) {
                System.out.println("[✔] MongoDB is bound to specific IP addresses.");
                succesChecks++;
            } else {
                System.out.println("[⚠] MongoDB is bound to all IP addresses (0.0.0.0). This is insecure.");
            }
        } catch (Exception e) {
            System.out.println("[⚠] Could not verify IP binding.");
        }
        totalChecks++;
    }

    public static void checkUsersWithNoRoles(MongoDatabase database) {
        try {
            Document command = new Document("usersInfo", 1);
            Document result = database.runCommand(command);
            var users = result.getList("users", Document.class);
            if (users.isEmpty()) {
                System.out.println("[⚠] No users found in the database.");
                totalChecks++;
                return;
            }
            for (Document user : users) {
                if (!user.containsKey("roles") || user.getList("roles", Document.class).isEmpty()) {
                    System.out.println("[⚠] User '" + user.getString("user") + "' has no roles assigned.");
                } else {
                    System.out.println("[✔] User '" + user.getString("user") + "' has roles assigned.");
                    succesChecks++;
                }
                totalChecks++;
            }
        } catch (Exception e) {
            System.out.println("[⚠] Could not verify user roles.");
        }
    }

    public static void checkDatabasePath(MongoDatabase database) {
        try {
            Document status = getServerConfig(database);
            String config = status.toJson();

            if (!config.contains("dbPath")) {
                System.out.println("[⚠] Database path is not configured. This is unsafe.");
            } else {
                System.out.println("[✔] Database path is configured.");
                succesChecks++;
            }
        } catch (Exception e) {
            System.out.println("[⚠] Could not verify database path configuration.");
        }
        totalChecks++;
    }

    public static void checkIndexes(MongoDatabase database,String collectionName) {
        try {
            MongoCollection<Document> collection = database.getCollection(collectionName);
            long indexCount = collection.listIndexes().into(new ArrayList<>()).size();

            if (indexCount == 0) {
                System.out.println("[⚠] Collection '" + collectionName + "' has no indexes.");
            } else {
                System.out.println("[✔] Collection '" + collectionName + "' has " + indexCount + " index(es).");
                succesChecks++;
            }
            totalChecks++;
        } catch (Exception e) {
            System.out.println("[⚠] Could not verify indexes.");
        }
    }

    public static void checkCappedCollections(MongoDatabase database,String collectionName) {
        try {
            Document stats = database.runCommand(new Document("collStats", collectionName));
            if (stats.containsKey("capped") && stats.getBoolean("capped")) {
                System.out.println("[✔] Collection '" + collectionName + "' is capped.");
                succesChecks++;
            } else {
                System.out.println("[⚠] Collection '" + collectionName + "' is not capped.");
            }
            totalChecks++;
        } catch (Exception e) {
            System.out.println("[⚠] Could not verify capped collections.");
        }
    }

    public static void checkAuditing(MongoDatabase database) {
        try {
            Document status = getServerConfig(database);
            if (status.toJson().contains("auditLog") && status.toJson().contains("destination")){
                System.out.println("[✔] Auditing is enabled.");
                succesChecks++;
            } else {
                System.out.println("[⚠] Auditing is not enabled.");
            }
        } catch (Exception e) {
            System.out.println("[⚠] Could not verify auditing.");
        }
        totalChecks++;
    }

    public static void checkEncryption(MongoDatabase database) {
        try {
            Document status = getServerConfig(database);
            
            if (status.toJson().contains("encryption")){
                Document encryptionConfig = (Document) status.get("parsed", Document.class)
                .get("security",Document.class).get("encryption");
                if(encryptionConfig != null && encryptionConfig.containsKey("enabled") && 
                    encryptionConfig.getBoolean("enabled")) {

                    System.out.println("[✔] Encryption is enabled.");
                    succesChecks++;
                } else {
                    System.out.println("[⚠] Encryption is not enabled.");
                }
            } else {   
                System.out.println("[⚠] Encryption is not configured.");
            }

        } catch (Exception e) {
            System.out.println("[⚠] Could not verify encryption.");
        }
        totalChecks++;
    }

    public static void serverVersionCheck(MongoDatabase database){
        try {
            Document command = new Document("serverStatus", 1);
            Document result = database.runCommand(command);
            String version = result.getString("version");
            if(version.substring(0, 1).equals("8")){
                System.out.println("[✔] MongoDB version is up to date");
                succesChecks++;
            } else {
                System.out.println("[⚠] MongoDB version is outdated. Please update to the latest version.");
            }
        } catch (Exception e) {
            System.out.println("[⚠] Could not retrieve server version.");
        }
        totalChecks++;
    }


    public static void scanAllCollections(MongoDatabase database) {
        for (String collectionName : database.listCollectionNames()) {
            System.out.println("\nScanning collection: " + collectionName);
            System.out.println("--------------------------------------------------");
            System.out.println("Checking for collection validator...");
            checkCollectionValidator(database, collectionName);
            System.out.println("\nChecking for NoSQL Injection...");
            testNoSQLInjection(database, collectionName);
            System.out.println("\nChecking for JavaScript execution...");
            testJavaScriptExecution(database, collectionName);
            System.out.println("\nChecking for indexes...");
            checkIndexes(database, collectionName);
            System.out.println("\nChecking for capped collections...");
            checkCappedCollections(database, collectionName);
        }
    }

    public static void runSecurityChecks(MongoDatabase database) {
        
        System.out.println("===================================================");
        System.out.println("Running security checks on " + database.getName() + " database...");
        System.out.println("===================================================");

        if(database.getName().equals("admin")) {

            System.out.println("\nCONFIGURATION CHECKS");
            System.out.println("Note: The following checks are only performed on the 'admin' database.");
            System.out.println("--------------------------------------------------");
            System.out.println("Checking network security...");
            System.out.println("--------------------------------------------------");
            checkTLS(database);
            checkIPBinding(database);

            System.out.println("\nChecking auth configuration...");
            System.out.println("--------------------------------------------------");
            checkAuthentication(database);

            System.out.println("\nChecking encryption...");
            System.out.println("--------------------------------------------------");
            checkEncryption(database);

            System.out.println("\nChecking server version...");
            System.out.println("--------------------------------------------------");
            serverVersionCheck(database);

            System.out.println("\nChecking database path...");
            System.out.println("--------------------------------------------------");
            checkDatabasePath(database);
    
            System.out.println("\nChecking auditing...");
            System.out.println("--------------------------------------------------");
            checkAuditing(database);

            System.out.println("\nDATABASE USERS CHECKS");
            System.out.println("--------------------------------------------------");
            System.out.println("Checking user roles...");
            System.out.println("--------------------------------------------------");
            checkUsersWithNoRoles(database);

        } 
        else {
            System.out.println("\nDATABASE USERS CHECKS");
            System.out.println("--------------------------------------------------");
            System.out.println("Checking user roles...");
            System.out.println("--------------------------------------------------");
            checkUsersWithNoRoles(database);


            System.out.println("\nCOLLECTIONS CHECKS");
            System.out.println("--------------------------------------------------");

            System.out.println("Checking database collections...");
            System.out.println("--------------------------------------------------");
            scanAllCollections(database);
        }
    }

    public static void resetCounters() {
        succesChecks = 0;
        totalChecks = 0;
    }
    
    public static int getSuccessChecks() {
        return succesChecks;
    }
    
    public static int getTotalChecks() {
        return totalChecks;
    }    

}